import socket,time,sys,threading,os,arguments,colors
import concurrent.futures 
from datetime import datetime
from colorama import Fore
print_lock = threading.Lock()
class PortScanner(object):
    def __init__(self,target):
        self.target = target
    def banner(self):
       now = datetime.now()
       dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
       print(f"""{colors.BGreen}
╔╦╗┬ ┬┬─┐┌─┐┌─┐┌┬┐┌─┐┌┬┐  ╔═╗┌─┐┬─┐┌┬┐  ╔═╗┌─┐┌─┐┌┐┌┌┐┌┌─┐┬─┐
 ║ ├─┤├┬┘├┤ ├─┤ ││├┤  ││  ╠═╝│ │├┬┘ │   ╚═╗│  ├─┤││││││├┤ ├┬┘
 ╩ ┴ ┴┴└─└─┘┴ ┴─┴┘└─┘─┴┘  ╩  └─┘┴└─ ┴   ╚═╝└─┘┴ ┴┘└┘┘└┘└─┘┴└─
               """) 
       time.sleep(0.3)
       print(f"{Fore.WHITE}Scanning Target: {Fore.GREEN}{self.target}")
       time.sleep(0.5)
       print(f"{Fore.WHITE}Script started at: {Fore.GREEN}{str(dt_string)}{Fore.WHITE}")       
       time.sleep(0.5)
       print(f"{Fore.WHITE}[{Fore.YELLOW}!{Fore.WHITE}]Scanning 10000 ports.\n")
    def scan_ports(self,port):
        scanner = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
        scanner.settimeout(1)
        try:
            scanner.connect((self.target,port))
            scanner.close()
            with print_lock:
                print(f'{colors.BWhite}[{colors.BGreen}+{colors.BWhite}]Open Port: {port}')
                if port == 8938:
                    print(f"{Fore.WHITE}[{Fore.YELLOW}!{Fore.WHITE}]Apache Solr service is running.\n")
                    create_file = lambda x : os.system(f"touch /tmp/{x}")
                    create_file("solr.txt")


        except KeyboardInterrupt:
            print(f"{Fore.WHITE}[{Fore.RED}-{Fore.WHITE}]Exiting Program.")
            sys.exit()
        except socket.gaierror:
            print(f"{WHITE}[{Fore.RED}-{Fore.WHITE}]Hostname Could Not Be Resolved.")
            sys.exit()
        except socket.error:
            pass

if __name__ == "__main__":
    call_class = PortScanner(arguments.args.target)
    banner = call_class.banner()
    with concurrent.futures.ThreadPoolExecutor(max_workers=250) as executor:
        for port in range(10000):
            executor.submit(call_class.scan_ports,port + 1)

       

